package Interface;

import Logic.Employee;
import Logic.Product;
import Logic.User;
import Persistence.MSAccess;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

 
/**
 * Class IntAddProduct
 * @author ASUS_
 */
public class IntAddProduct extends javax.swing.JFrame {
    DefaultTableModel modelo;
   /**
    * ProductList
    */
    private int indexproduct; 
    private User user = new User();
    private MSAccess dataFile; 
    int productCode = 0;
    Employee employee;
   
    /**
     * Method IntAddProduct
     */
    public IntAddProduct() {
        initComponents();
        employee = new Employee();
        this.setDataFile(new MSAccess());
        this.newView();
        lblUser.setText(employee.getUserName());
        modelo = new DefaultTableModel();
        tblInventory.setModel(modelo);
        
        
        modelo.addColumn("Product code");
        modelo.addColumn("Product name ");
        modelo.addColumn("Product quantity");
        modelo.addColumn("Provider");
        modelo.addColumn("Product type");
        modelo.addColumn("Purchase Value");
        modelo.addColumn("Sale price");
        modelo.addColumn("Value at Warehouse");
        this.addTable();  
    }
    
    /**
     * Get Index product
     * @return indexproduct
     */
    public int getIndexproduct() {
        return indexproduct;
    }
    /**
     * Set index product
     * @param indexproduct indexproduct
     */
    public void setIndexproduct(int indexproduct) {
        this.indexproduct = indexproduct;
    }
    public JLabel getLabelUser() {
        return lblUser;
    }
    
    public void setLabelUser(String userName) {
        this.lblUser.setText(userName);
    }

    public MSAccess getDataFile() {
        return dataFile;
    }

    public void setDataFile(MSAccess dataFile) {
        this.dataFile = dataFile;
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlInter7 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        lblProdCode = new javax.swing.JLabel();
        lblProdName = new javax.swing.JLabel();
        lblProdQuantity = new javax.swing.JLabel();
        btnAddProduct = new javax.swing.JButton();
        btnDeleteProd = new javax.swing.JButton();
        txtProdCode = new javax.swing.JTextField();
        txtProdName = new javax.swing.JTextField();
        txtProdQuantity = new javax.swing.JTextField();
        pnlTable7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInventory = new javax.swing.JTable();
        lblTittleAddProduct = new javax.swing.JLabel();
        lblProvider = new javax.swing.JLabel();
        txtProvider = new javax.swing.JTextField();
        lblProductType = new javax.swing.JLabel();
        lblPurchaseValue = new javax.swing.JLabel();
        lblSalePrice = new javax.swing.JLabel();
        txtPurchaseValue = new javax.swing.JTextField();
        txtSalePrice = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jcbProductType = new javax.swing.JComboBox<String>();
        btnUpdate = new javax.swing.JButton();
        lblUser = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlInter7.setBackground(new java.awt.Color(204, 204, 255));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblProdCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProdCode.setText("Product code");

        lblProdName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProdName.setText("Product name");

        lblProdQuantity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProdQuantity.setText("Product quantity");

        btnAddProduct.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddProduct.setText("New");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        btnDeleteProd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteProd.setText("Delete");
        btnDeleteProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProdActionPerformed(evt);
            }
        });

        txtProdQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProdQuantityActionPerformed(evt);
            }
        });

        pnlTable7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblInventory.setEnabled(false);
        jScrollPane1.setViewportView(tblInventory);

        javax.swing.GroupLayout pnlTable7Layout = new javax.swing.GroupLayout(pnlTable7);
        pnlTable7.setLayout(pnlTable7Layout);
        pnlTable7Layout.setHorizontalGroup(
            pnlTable7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTable7Layout.setVerticalGroup(
            pnlTable7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        lblTittleAddProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Add Product.png"))); // NOI18N

        lblProvider.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProvider.setText("Provider");

        txtProvider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProviderActionPerformed(evt);
            }
        });

        lblProductType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductType.setText("Product type");

        lblPurchaseValue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPurchaseValue.setText("Purchase value");

        lblSalePrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSalePrice.setText("Sale price");

        txtSalePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalePriceActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jcbProductType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Miscellany", "Stores", "Stationery" }));
        jcbProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProductTypeActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pnlInter7Layout = new javax.swing.GroupLayout(pnlInter7);
        pnlInter7.setLayout(pnlInter7Layout);
        pnlInter7Layout.setHorizontalGroup(
            pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInter7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInter7Layout.createSequentialGroup()
                                .addComponent(lblProdName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInter7Layout.createSequentialGroup()
                                .addComponent(lblSalePrice)
                                .addGap(62, 62, 62)
                                .addComponent(txtSalePrice))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInter7Layout.createSequentialGroup()
                                .addComponent(lblPurchaseValue)
                                .addGap(24, 24, 24)
                                .addComponent(txtPurchaseValue))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInter7Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlInter7Layout.createSequentialGroup()
                                        .addComponent(lblProdQuantity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtProdQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInter7Layout.createSequentialGroup()
                                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblProvider)
                                            .addComponent(lblProductType))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtProvider, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                            .addComponent(jcbProductType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(pnlInter7Layout.createSequentialGroup()
                                .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDeleteProd)
                                    .addComponent(btnSearch)
                                    .addComponent(btnUpdate))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addComponent(btnAddProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(pnlTable7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlInter7Layout.createSequentialGroup()
                .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblProdCode)
                        .addGap(35, 35, 35)
                        .addComponent(txtProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(btnBack)
                        .addGap(157, 157, 157)
                        .addComponent(lblTittleAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlInter7Layout.setVerticalGroup(
            pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInter7Layout.createSequentialGroup()
                .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lblTittleAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBack))))
                .addGap(18, 18, 18)
                .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInter7Layout.createSequentialGroup()
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProdCode)
                            .addComponent(txtProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProdName)
                            .addComponent(txtProdName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProdQuantity)
                            .addComponent(txtProdQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProvider)
                            .addComponent(txtProvider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProductType)
                            .addComponent(jcbProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPurchaseValue)
                            .addComponent(txtPurchaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSalePrice)
                            .addComponent(txtSalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch)
                        .addGap(8, 8, 8)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteProd)
                        .addGap(45, 45, 45))
                    .addComponent(pnlTable7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(pnlInter7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInter7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSalePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalePriceActionPerformed

    private void txtProviderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProviderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProviderActionPerformed

    private void txtProdQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProdQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProdQuantityActionPerformed
    /**
     * Button Delete
     * @param evt 
     */
    private void btnDeleteProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProdActionPerformed
         if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            this.deleteProduct();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
            JOptionPane.INFORMATION_MESSAGE);
            this.addTable();
        }
    }//GEN-LAST:event_btnDeleteProdActionPerformed
    /**
     * Button add product
     * @param evt 
     */
    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
     if (btnAddProduct.getText().equals("New")) {
            this.newView();
        }
        else if (btnAddProduct.getText().equals("Save")) {
            if (validateView()) {
                this.insertProduct();
                this.addTable();
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                 "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddProductActionPerformed
    /**
     * Button back
     * @param evt 
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed
    /**
     * Button search
     * @param evt 
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
      int id = Integer.parseInt(JOptionPane.showInputDialog(
                "Please, write the product code", "Product code"));
        if (id > 0) {
            this.searchProduct(id);
            txtProdCode.setEditable(false);
        }
    }//GEN-LAST:event_btnSearchActionPerformed
    /**
     * Button update
     * @param evt 
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.updateProduct();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
        JOptionPane.INFORMATION_MESSAGE);
        this.addTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jcbProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProductTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbProductTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntAddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntAddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntAddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntAddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntAddProduct().setVisible(true);
            }
        });
    }
       /**
        * Method new interface
        */
     private void newView() {
        txtProdCode.setText("");
        txtProdCode.setEditable(true);
        txtProdName.setText("");
        txtProdName.setEditable(true);
        txtProdQuantity.setText("");
        txtProvider.setText("");
        jcbProductType.setSelectedItem(ABORT);
        txtPurchaseValue.setText("");
        txtSalePrice.setText("");
        btnAddProduct.setText("Save");
        
    }
     
     private boolean validateView(){
        boolean validate;
         validate = !(txtProdCode.getText().equals("")
                    || txtProdName.getText().equals("")
                    || txtProdQuantity.getText().equals("")
                    || txtProvider.getText().equals("")
                    || txtPurchaseValue.getText().equals("")
                    || txtSalePrice.getText().equals(""));
        return validate;
     }
     
     private void insertProduct() {
        Product product = this.interface2Object();
        String query = "INSERT INTO Product"
                + "(productCode, productName, productQuantity, provider, productType, purchaseValue, salePrice, totalValueWarehouse)"
                + "VALUES ("
                + product.getProductCode() + ", '"
                + product.getProductName() + "','"
                + product.getProductQuantity() + "', '"
                + product.getProvider() + "','"
                + product.getProductType() + "',"
                + product.getPurchaseValue() + "," 
                + product.getSalePrice() + ","
                + product.getTotalValueWarehouse() +")";
        if (this.getDataFile().execute(query)) {
            JOptionPane.showMessageDialog(this, "product registered");
            this.searchProduct(product.getProductCode());
        }
        else
           JOptionPane.showMessageDialog(this, "Repeated Code", "error",JOptionPane.ERROR);
    }
     

    /**
     * Method update Interface
     */
    private void updateInterface() { 
      if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }
    


    /**
     * You obtain data from the interface and passes it to an object 
     * @return Product object 
     */
    private Product interface2Object() {
        Product product = new Product();
        
        product.setProductCode(Integer.parseInt(txtProdCode.getText()));
        product.setProductName(txtProdName.getText());
        product.setProductQuantity(txtProdQuantity.getText());
        product.setProductType(" " + jcbProductType.getSelectedItem());
        product.setProvider(txtProvider.getText());
        product.setPurchaseValue(Double.parseDouble(txtPurchaseValue.getText()));
        product.setSalePrice(Double.parseDouble(txtSalePrice.getText()));
        product.setTotalValueWarehouse((long)(Integer.parseInt(product.getProductQuantity())*product.getPurchaseValue()));
        
        return product;
    }
    /**
     * Method AddTable
     */
    private void addTable(){
        
            for (int i = 0; i<tblInventory.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
        Object []object = new Object[8];
        try {
            String query = "SELECT * FROM Product";
            this.getDataFile().execute(query);
            while(dataFile.getResultSet().next()) {
                object[0] = dataFile.getResultSet().getInt("productCode");
                object[1] = dataFile.getResultSet().getString("productName");
                object[2] = dataFile.getResultSet().getInt("productQuantity");
                object[3] = dataFile.getResultSet().getString("provider");
                object[4] = dataFile.getResultSet().getString("ProductType");
                object[5] = dataFile.getResultSet().getDouble("purchaseValue");
                object[6] = dataFile.getResultSet().getDouble("salePrice");
                object[7] = dataFile.getResultSet().getLong("totalValueWarehouse");
                modelo.addRow(object);
            }
        } catch (SQLException | NullPointerException ex) {
            Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }   
    
  
    private void object2View() {
        Product product = new Product();
        try {
            product.setProductCode(this.getDataFile().getResultSet().getInt("productCode"));
            product.setProductName(this.getDataFile().getResultSet().getString("productName"));
            product.setProductQuantity(this.getDataFile().getResultSet().getString("productQuantity"));
            product.setProvider(this.getDataFile().getResultSet().getString("provider"));
            product.setProductType(this.getDataFile().getResultSet().getString("productType"));
            product.setPurchaseValue(this.getDataFile().getResultSet().getDouble("purchaseValue"));
            product.setSalePrice(this.getDataFile().getResultSet().getDouble("salePrice"));
            product.setTotalValueWarehouse(this.getDataFile().getResultSet().getLong("totalValueWarehouse"));
            
            this.object2View(product);
        } 
        catch (SQLException ex) {
            Logger.getLogger(IntAddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
            

    }
     
      private void object2View(Product product) {
        txtProdCode.setText(""+product.getProductCode());
        txtProdName.setText(product.getProductName());
        txtProdQuantity.setText(product.getProductQuantity());
        txtProvider.setText(product.getProvider());
        txtPurchaseValue.setText(""+product.getPurchaseValue());
        txtSalePrice.setText(""+product.getSalePrice());
        jcbProductType.setSelectedItem(product.getProductType());
    }
      
      private void updateProduct() {
        Product product = this.interface2Object();
        String query = "UPDATE Product SET "
                + "productName = '"+product.getProductName() + "', "
                + "productQuantity ='"+product.getProductQuantity()+"',"
                + "provider ='"+product.getProvider()+"',"
                + "productType ='"+product.getProductType()+"',"
                + "purchaseValue = "+product.getPurchaseValue()+" ,"
                + "salePrice = "+product.getSalePrice()+" ,"
                + "totalValueWarehouse = "+product.getTotalValueWarehouse() + " "
                + "WHERE productCode = " + product.getProductCode();
        if (this.getDataFile().execute(query)) {
            selectProduct();
            this.searchProduct(product.getProductCode());
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteProd;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbProductType;
    private javax.swing.JLabel lblProdCode;
    private javax.swing.JLabel lblProdName;
    private javax.swing.JLabel lblProdQuantity;
    private javax.swing.JLabel lblProductType;
    private javax.swing.JLabel lblProvider;
    private javax.swing.JLabel lblPurchaseValue;
    private javax.swing.JLabel lblSalePrice;
    private javax.swing.JLabel lblTittleAddProduct;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel pnlInter7;
    private javax.swing.JPanel pnlTable7;
    private javax.swing.JTable tblInventory;
    private javax.swing.JTextField txtProdCode;
    private javax.swing.JTextField txtProdName;
    private javax.swing.JTextField txtProdQuantity;
    private javax.swing.JTextField txtProvider;
    private javax.swing.JTextField txtPurchaseValue;
    private javax.swing.JTextField txtSalePrice;
    // End of variables declaration//GEN-END:variables

    private void deleteProduct() {
        Product product= this.interface2Object();
        String query = "DELETE * FROM Product WHERE productCode = " + product.getProductCode();
        if (this.getDataFile().execute(query)) {
            this.selectProduct();
        }        
    }
    
      private void selectProduct() {
        String query = "SELECT * FROM Product";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateInterface();
            } catch (SQLException ex) {
                Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void searchProduct(int code) {
        String query = "SELECT * FROM Product WHERE productCode="+code+"";
        this.dataFile.execute(query);
        try {
            if(dataFile.getResultSet().next()==true){
                 productCode= code;
                object2View();
                btnAddProduct.setText("New");
            }else{
                JOptionPane.showMessageDialog(this, "Product was not found");
            }
        } catch (SQLException ex) {
            Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
