package Interface;

import Logic.Employee;
import Persistence.MSAccess;
import java.util.List;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *Class IntRegEli
 * @author ANDRES
 */
public class IntRegEli extends javax.swing.JFrame {
    private List<Employee> employeeList;
    private int indexemployee; 
    private MSAccess dataFile; 
    int employeeCode = 0;
    DefaultTableModel modelo;
    
    /**
     * Creates new form Interfaz4
     */
    public IntRegEli() {

        initComponents();
        this.setDataFile(new MSAccess());
        modelo = new DefaultTableModel();
        tblEmployee.setModel(modelo);
        modelo.addColumn("Code");
        modelo.addColumn("Name ");
        modelo.addColumn("Identification");
        modelo.addColumn("Position");
        modelo.addColumn("User name");
        modelo.addColumn("Password");
        indexEmployee();
        this.addTable();
        this.addItems();
    }

    public List<Employee> getEmployeeList() {
        return employeeList;
    }

    public void setEmployeeList(List<Employee> employeeList) {
        this.employeeList = employeeList;
    }

    public int getIndexemployee() {
        return indexemployee;
    }

    public void setIndexemployee(int indexemployee) {
        this.indexemployee = indexemployee;
    }
    
    public JLabel getLabelUser() {
        return lblUser;
    }
    
    public void setLabelUser(String userName) {
        this.lblUser1.setText(userName);
    }

    public MSAccess getDataFile() {
        return dataFile;
    }

    public void setDataFile(MSAccess dataFile) {
        this.dataFile = dataFile;
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlInter4 = new java.awt.Panel();
        btnRegisEmp = new javax.swing.JButton();
        btnElimDeliv = new javax.swing.JButton();
        pnlTable4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        lblTittleRandE = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblPosition = new javax.swing.JLabel();
        jcbPosition = new javax.swing.JComboBox<String>();
        lblNameEmp = new javax.swing.JLabel();
        txtEmployeeName = new javax.swing.JTextField();
        lblIdEmp = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtEmployeeIdentification = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        jpfPassword = new javax.swing.JPasswordField();
        lblUser1 = new javax.swing.JLabel();
        lblIndexEmployee = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlInter4.setBackground(new java.awt.Color(204, 204, 255));

        btnRegisEmp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRegisEmp.setText("Save");
        btnRegisEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisEmpActionPerformed(evt);
            }
        });

        btnElimDeliv.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnElimDeliv.setText("Delete Employee");
        btnElimDeliv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElimDelivActionPerformed(evt);
            }
        });

        pnlTable4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblEmployee.setEnabled(false);
        jScrollPane1.setViewportView(tblEmployee);

        javax.swing.GroupLayout pnlTable4Layout = new javax.swing.GroupLayout(pnlTable4);
        pnlTable4.setLayout(pnlTable4Layout);
        pnlTable4Layout.setHorizontalGroup(
            pnlTable4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTable4Layout.setVerticalGroup(
            pnlTable4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTable4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblTittleRandE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Register and Elimination of Employees.png"))); // NOI18N

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblPosition.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosition.setText("Position");

        jcbPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPositionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPosition)
                .addGap(18, 18, 18)
                .addComponent(jcbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPosition)
                    .addComponent(jcbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblNameEmp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNameEmp.setText("Employee Name");

        txtEmployeeName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblIdEmp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblIdEmp.setText("Employee Identification");

        lblUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUser.setText("User");

        lblPassword.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPassword.setText("Password");

        txtEmployeeIdentification.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jpfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpfPasswordActionPerformed(evt);
            }
        });

        lblUser1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblIndexEmployee.setText("jLabel1");

        javax.swing.GroupLayout pnlInter4Layout = new javax.swing.GroupLayout(pnlInter4);
        pnlInter4.setLayout(pnlInter4Layout);
        pnlInter4Layout.setHorizontalGroup(
            pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInter4Layout.createSequentialGroup()
                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInter4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInter4Layout.createSequentialGroup()
                        .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInter4Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(lblTittleRandE))
                            .addGroup(pnlInter4Layout.createSequentialGroup()
                                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlInter4Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlInter4Layout.createSequentialGroup()
                                                .addComponent(lblPassword)
                                                .addGap(244, 244, 244)
                                                .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlInter4Layout.createSequentialGroup()
                                                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblNameEmp)
                                                    .addComponent(lblIdEmp)
                                                    .addComponent(lblUser))
                                                .addGap(148, 148, 148)
                                                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtEmployeeIdentification, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(pnlInter4Layout.createSequentialGroup()
                                        .addGap(126, 126, 126)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlInter4Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(btnRegisEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnUpdate)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnElimDeliv, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(62, 62, 62)
                                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblIndexEmployee)
                                    .addComponent(pnlTable4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 39, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlInter4Layout.setVerticalGroup(
            pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInter4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(lblUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(lblTittleRandE, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlInter4Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNameEmp)
                            .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIdEmp)
                            .addComponent(txtEmployeeIdentification, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUser)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnlTable4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(pnlInter4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegisEmp)
                    .addComponent(btnSearch)
                    .addComponent(btnUpdate)
                    .addComponent(btnElimDeliv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblIndexEmployee))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInter4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInter4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisEmpActionPerformed
         if (btnRegisEmp.getText().equals("New")) {
            this.newView();
        }
        else if (btnRegisEmp.getText().equals("Save")) {
            if (validateView() && (validateUser()==false)) {
                this.insertEmployee();
                this.indexEmployee();
                this.addTable();
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields,or the Identification is equal to another, or existing user", 
                 "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegisEmpActionPerformed
    /**
     * Button Back
     * @param evt 
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void jpfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpfPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpfPasswordActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        int id = Integer.parseInt(JOptionPane.showInputDialog(
                "Please, write the employee code", "Employee id"));
        if (id > 0) {
            this.searchEmployee(id);
        }
       
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        this.updateEmployee();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
        JOptionPane.INFORMATION_MESSAGE);
        this.addTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnElimDelivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimDelivActionPerformed
         if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            this.deleteEmployee();
            indexEmployee();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
            JOptionPane.INFORMATION_MESSAGE);
            this.addTable();
        }
    }//GEN-LAST:event_btnElimDelivActionPerformed

    private void jcbPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbPositionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntRegEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntRegEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntRegEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntRegEli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntRegEli().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnElimDeliv;
    private javax.swing.JButton btnRegisEmp;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbPosition;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JLabel lblIdEmp;
    private javax.swing.JLabel lblIndexEmployee;
    private javax.swing.JLabel lblNameEmp;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblTittleRandE;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUser1;
    private java.awt.Panel pnlInter4;
    private javax.swing.JPanel pnlTable4;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTextField txtEmployeeIdentification;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void updateInterface() {
       if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
       }


    private Employee interface2Object() {
        Employee employee = new Employee();
 
        employee.setEmployeeCode(Integer.parseInt(lblIndexEmployee.getText()));
        employee.setEmployeeName(txtEmployeeName.getText());
        employee.setEmployeeIdentification(Integer.parseInt(txtEmployeeIdentification.getText()));
        employee.setEmployeePosition(""+jcbPosition.getSelectedItem());
        employee.setUserName(txtUser.getText());
        char[] arrayChar = jpfPassword.getPassword(); 
        String auxPass = new String(arrayChar); 
        employee.setPassword(auxPass);
        return employee;
    }
    
    private Employee interface2Object2() {
        Employee employee = new Employee();
 
        employee.setEmployeeCode(this.employeeCode);
        employee.setEmployeeName(txtEmployeeName.getText());
        employee.setEmployeeIdentification(Integer.parseInt(txtEmployeeIdentification.getText()));
        employee.setEmployeePosition(""+jcbPosition.getSelectedItem());
        employee.setUserName(txtUser.getText());
        char[] arrayChar = jpfPassword.getPassword(); 
        String auxPass = new String(arrayChar); 
        employee.setPassword(auxPass);
        return employee;
    }
    
     private void indexEmployee(){
        try {
            String sql ="SELECT * FROM Employee ORDER BY employeeCode DESC LIMIT 1";
            dataFile.execute(sql);
            while(dataFile.getResultSet().next()){
                int last=dataFile.getResultSet().getInt("employeeCode");
                int plus=last+1;
                lblIndexEmployee.setText(""+plus);
                lblIndexEmployee.setVisible(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(IntBill.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    private void addTable() {
        
            for (int i = 0; i<tblEmployee.getRowCount(); i++) {
            modelo.removeRow(i);
            i-=1;
        }
        Object []object = new Object[6];
        try {
            String query = "SELECT * FROM Employee";
            this.getDataFile().execute(query);
            while(dataFile.getResultSet().next()) {
                object[0] = dataFile.getResultSet().getInt("employeeCode");
                object[1] = dataFile.getResultSet().getString("employeeName");
                object[2] = dataFile.getResultSet().getInt("employeeIdentification");
                object[3] = dataFile.getResultSet().getString("employeePosition");
                object[4] = dataFile.getResultSet().getString("userName");
                object[5] = dataFile.getResultSet().getString("password");
                modelo.addRow(object);
            }
        } catch (SQLException | NullPointerException ex) {
            Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void newView() {
        txtEmployeeIdentification.setText("");
        txtEmployeeIdentification.setEditable(true);
        txtEmployeeName.setText("");
        txtEmployeeName.setEditable(true);
        txtUser.setText("");
        txtUser.setEditable(true);
        jpfPassword.setText("");
        btnRegisEmp.setText("Save");
    }

    
    
    private boolean validateView() {
        boolean validate = false;
             validate = !(txtEmployeeName.getText().equals("")
                    || jcbPosition.getSelectedItem().equals("")
                    || jpfPassword.getPassword().equals("")
                    );
        return validate;
    }
    
   
    private boolean validateUser(){
       boolean flag = false;
        try {
            String query = "SELECT * FROM Employee";
            this.getDataFile().execute(query);
            while(dataFile.getResultSet().next()){
                if((Integer.parseInt(txtEmployeeIdentification.getText())==(dataFile.getResultSet().getInt("employeeIdentification"))) ||(txtUser.getText().equals(dataFile.getResultSet().getString("userName")))){
                    flag=true;
                }
            }   } catch (SQLException ex) {
            Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
        }
        return flag;
        
    }
    

    private void insertEmployee() {
        Employee employee = this.interface2Object();
        String query = "INSERT INTO Employee"
                + "(employeeCode, employeeName, employeeIdentification, employeePosition, userName, password)"
                + "VALUES ("
                + employee.getEmployeeCode() + ", '"
                + employee.getEmployeeName() + "', "
                + employee.getEmployeeIdentification() + ", '"
                + employee.getEmployeePosition() + "','"
                + employee.getUserName() + "','"
                + employee.getPassword() + "')";
        if (this.getDataFile().execute(query)) {
            JOptionPane.showMessageDialog(this, "Employee registered");
            this.searchEmployee(employee.getEmployeeIdentification());
        }
    }

    private void addItems() {
            jcbPosition.addItem("Administrator");
            jcbPosition.addItem("Seller");
            jcbPosition.addItem("Dealer");
    }

    private void selectEmployee() {
        String query = "SELECT * FROM Employee";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateInterface();
            } catch (SQLException ex) {
                Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
     private void object2View() {
        Employee employee = new Employee();
        try {
            employee.setEmployeeCode(this.getDataFile().getResultSet().getInt("employeeCode"));
            employee.setEmployeeName(this.getDataFile().getResultSet().getString("employeeName"));
            employee.setEmployeeIdentification(this.getDataFile().getResultSet().getInt("employeeIdentification"));
            employee.setEmployeePosition(this.getDataFile().getResultSet().getString("employeePosition"));
            employee.setUserName(this.getDataFile().getResultSet().getString("UserName"));
            employee.setPassword(this.getDataFile().getResultSet().getString("password"));
            this.object2View(employee);
        } catch (SQLException ex) {
            Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
      private void object2View(Employee employee) {
        txtEmployeeIdentification.setText("" + employee.getEmployeeIdentification());
        txtEmployeeIdentification.setText("" + employee.getEmployeeIdentification());
        txtEmployeeName.setText(employee.getEmployeeName());
        txtUser.setText(employee.getUserName());
        jpfPassword.setText(employee.getPassword());
    }
     
    private void searchEmployee(int code) {
        String query = "SELECT * FROM Employee WHERE employeeCode="+code+"";
        this.dataFile.execute(query);
        try {
            if(dataFile.getResultSet().next()==true){
                employeeCode = code;
                btnRegisEmp.setText("New");
                object2View();
            }else{
                JOptionPane.showMessageDialog(this, "Employee was not found");
            }
        } catch (SQLException ex) {
            Logger.getLogger(IntRegEli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateEmployee() {
        Employee employee = this.interface2Object2();
        String query = "UPDATE Employee SET "
                + "employeeName = '"+employee.getEmployeeName() + "', "
                + "employeeIdentification = "+employee.getEmployeeIdentification() + ", "
                + "employeePosition = '"+employee.getEmployeePosition() + "',"
                + "userName = '"+employee.getUserName() + "',"
                + "password = '" +employee.getPassword() + "'"  
                + "WHERE employeeCode = " + employee.getEmployeeCode();
        if (this.getDataFile().execute(query)) {
            selectEmployee();
            this.searchEmployee(employee.getEmployeeCode());
        }
    }
    
     private void deleteEmployee() {
        Employee employee = this.interface2Object2();
        String query = "DELETE * FROM Employee WHERE employeeCode = " + employee.getEmployeeCode();
        if (this.getDataFile().execute(query)) {
            this.selectEmployee();
        }        
    }



 }
             
